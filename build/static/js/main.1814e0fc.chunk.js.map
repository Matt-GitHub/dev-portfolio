{"version":3,"sources":["assets/icons8-right-35.svg","assets/icons8-github-50.svg","assets/icons8-linkedin-50.svg","assets/icons8-twitter-50.svg","components/Header.js","components/Trackr.js","components/SoMe.js","components/Experience.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","target","fill","src","Github","alt","LinkedIn","Twitter","Trackr","Arrow","SoMe","Experience","Contact","useState","value","copied","copy","setCopy","Alert","props","elevation","variant","React","open","setOpen","handleClose","event","reason","text","onCopy","onClick","Snackbar","autoHideDuration","onClose","severity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1814e0fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons8-right-35.eef4c71a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-github-50.135b499e.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-linkedin-50.3241aa46.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-twitter-50.193bdff7.svg\";","import React from \"react\";\nimport Github from \"../assets/icons8-github-50.svg\";\nimport LinkedIn from \"../assets/icons8-linkedin-50.svg\";\nimport Twitter from \"../assets/icons8-twitter-50.svg\";\n\nconst Header = () => {\n  return (\n    <nav className=\"headerContainer\">\n      <p className=\"intro\">Hi, my name is</p>\n      <h1 className=\"name\">\n        Matthew <span className=\"alt\">Bedard</span>\n      </h1>\n      <p className=\"intro\">I develop tools for the modern user</p>\n      <div className=\"media\">\n        <ul>\n          <li className=\"links\">\n            <a href=\"https://github.com/matt-github\" target=\"blank\">\n              <img fill=\"\" src={Github} alt=\"github\" />\n            </a>\n          </li>\n          <li className=\"links\">\n            <a href=\"https://github.com/matt-github\" target=\"blank\">\n              <img src={LinkedIn} alt=\"LinkedIn\" />\n            </a>\n          </li>\n          <li className=\"links\">\n            <a href=\"https://github.com/matt-github\" target=\"blank\">\n              <img fill=\"\" src={Twitter} alt=\"Twitter\" />\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Arrow from \"../assets/icons8-right-35.svg\";\n\nconst Trackr = () => {\n  return (\n    <section className=\"project\">\n      <div className=\"projectDescription\">\n        <h2 className=\"projectHeader\">Trackr</h2>\n        <p className=\"projectParagraph\">\n          A personal project that represents a niche spin-off of the popular job\n          hunter app, Huntr. Trackr is an all-in-one application tracker\n          tailored towards new grads that allows users to manage their\n          applications across platforms, create and leverage their network for\n          open positions, and access guides and resources to be a stand out\n          applicant\n        </p>\n        <ul className=\"projectUl\">\n          <li>Built using react, redux, node js, and postgreSQL</li>\n          <li>Developed database schema following RESTful api principles</li>\n          <li>\n            Managed data flow and state management using redux and react hooks\n            to create seamless user experience\n          </li>\n        </ul>\n        <p className=\"projectParagraphLink\">\n          Checkout the code{\" \"}\n          <img\n            className=\"projectImage\"\n            src={Arrow}\n            alt=\"arrow pointing right\"\n          />\n        </p>\n        <p className=\"projectParagraphLink\">\n          Checkout the app{\" \"}\n          <img\n            className=\"projectImage\"\n            src={Arrow}\n            alt=\"arrow pointing right\"\n          />\n        </p>\n      </div>\n      <div className=\"projectImages\">\n        {/* <div className=\"twoImages\">\n          <img className=\"projectImageImport\" src={Image} alt=\"something\" />\n          <img className=\"projectImageImport\" src={Image} alt=\"fun\" />\n        </div>\n        <div className=\"twoImages\">\n          <img className=\"projectImageImport\" src={Image} alt=\"asdf\" />\n          <img className=\"projectImageImport\" src={Image} alt=\"asdf\" />\n        </div> */}\n      </div>\n    </section>\n  );\n};\n\nexport default Trackr;\n","import React from \"react\";\nimport Arrow from \"../assets/icons8-right-35.svg\";\n\nconst SoMe = () => {\n  return (\n    <section className=\"labs\">\n      <div className=\"labsDescription\">\n        <h2 className=\"labsHeader\">SoMe</h2>\n        <p className=\"labsParagraph\">\n          A social media manager, kanban style, capable of organizing, and\n          scheduling tweets while simulatenously managing engagement statistics.\n          Data science enables a user to gauge what is the optimal posting time\n          and how effective a tweet will be to their following\n        </p>\n        <ul className=\"labsUl\">\n          <li>\n            Built from scrath in less than 8 weeks, with cross discipline teams\n            (ux, data science) in an agile enviornment\n          </li>\n          <li>\n            Implemented Twitter's API enabling users to draft, schedule and post\n            tweets to any of their accounts\n          </li>\n          <li>\n            Led consultations with product stakeholders and real-world users in\n            a SCRUM enviornment\n          </li>\n        </ul>\n        <p className=\"labsParagraphLink\">\n          Checkout the experience{\" \"}\n          <img className=\"labsImage\" src={Arrow} alt=\"arrow pointing right\" />\n        </p>\n        <p className=\"labsParagraphLink\">\n          Checkout the code{\" \"}\n          <img className=\"labsImage\" src={Arrow} alt=\"arrow pointing right\" />\n        </p>\n      </div>\n      <div className=\"labsPhotos\"></div>\n    </section>\n  );\n};\n\nexport default SoMe;\n","import React from \"react\";\n\nconst Experience = () => {\n  return (\n    <section className=\"experienceContainer\">\n      <h3 className=\"experienceTitle\">A little about me</h3>\n      <p className=\"experienceParagraph\">\n        I am a software engineer, currently based in the Greater Philadelphia\n        Area. Formally trained in Finance but fell in love with the creativity\n        and problem solving that comes with being an engineer. Most of the time\n        you can find me working on a project that includes JavaScript, React,\n        and Node js. When I have free time I find myself working out, cooking a\n        meal with semi-adherence to the online recipe (so many spices) or\n        navigating my way through the world of computer science. That's enough\n        about me, for now, if you would like to extend the conversation, reach\n        out!\n      </p>\n    </section>\n  );\n};\n\nexport default Experience;\n","import React, { useState } from \"react\";\n// copy clipboard package\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n// material ui imports\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nconst Contact = () => {\n  const [copy, setCopy] = useState({\n    value: \"matthewjamesbedard@outlook.com\",\n    copied: false\n  });\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <section className=\"contactContainer\">\n      <h4 className=\"contactTitle\">Contact</h4>\n\n      <p className=\"contactParagraph\">\n        Send an email to{\" \"}\n        <CopyToClipboard\n          text={copy.value}\n          onCopy={() => setCopy({ copied: true })}\n        >\n          <span className=\"email\" onClick={handleClick}>\n            MatthewJamesBedard@outlook.com\n          </span>\n        </CopyToClipboard>\n      </p>\n\n      <p className=\"contactParagraph\">\n        Add me to your network{\" \"}\n        <a\n          href=\"https://linkedin.com/in/matthew-james-b1bb891a5\"\n          target=\"blank\"\n        >\n          LinkedIn\n        </a>\n      </p>\n      <p className=\"contactParagraph\">\n        Tag me in a tweet{\" \"}\n        <a href=\"https://twitter.com/Matthew_Bedard_\" target=\"blank\">\n          @Matthew_Bedard_\n        </a>\n      </p>\n\n      <Snackbar open={open} autoHideDuration={4000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Email Copied to Clipboard\n        </Alert>\n      </Snackbar>\n    </section>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Trackr from \"./components/Trackr\";\nimport SoMe from \"./components/SoMe\";\nimport Experience from \"./components/Experience\";\nimport Contact from \"./components/Contact\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Trackr />\n      <SoMe />\n      <Experience />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./sass/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}